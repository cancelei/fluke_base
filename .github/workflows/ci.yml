name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RUBY_VERSION: '3.2.1'
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: fluke_base_test
  CI: true

jobs:
  # Essential linting - run in parallel
  lint:
    name: üîç Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        linter: [rubocop, brakeman, erb_lint, eslint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        if: matrix.linter != 'eslint'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Set up Node.js
        if: matrix.linter == 'eslint'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        if: matrix.linter == 'eslint'
        run: npm ci

      - name: Run RuboCop
        if: matrix.linter == 'rubocop'
        run: bundle exec rubocop --format=github

      - name: Run Brakeman
        if: matrix.linter == 'brakeman'
        run: bundle exec brakeman --quiet --format=text

      - name: Run ERB Lint
        if: matrix.linter == 'erb_lint'
        run: bundle exec erb_lint --lint-all --format=compact

      - name: Run ESLint
        if: matrix.linter == 'eslint'
        run: npm run lint:js

  # Essential tests only
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install PostgreSQL client tools
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client
          bundle install --jobs 4 --retry 3
          npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
          PGUSER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
          PGHOST: localhost
          PGPORT: 5432
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Create database only if it doesn't exist
          bundle exec rails db:create || echo "Database already exists"
          
          # Run primary migrations
          bundle exec rails db:migrate
          
          # Skip additional migrations for now to simplify CI
          echo "Database setup completed successfully"

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
          COVERAGE: true
          CI: true
        run: |
          # Run essential tests (models and helpers)
          test_dirs=""
          [ -d "spec/models" ] && test_dirs="$test_dirs spec/models"
          [ -d "spec/helpers" ] && test_dirs="$test_dirs spec/helpers"
          
          if [ -n "$test_dirs" ]; then
            bundle exec rspec $test_dirs --format progress
          else
            echo "No test directories found, skipping test execution"
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Summary
  summary:
    name: üìä Summary
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üèóÔ∏è CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Linting | ${{ needs.lint.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Tests | ${{ needs.test.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.lint.result }}" != "success" || "${{ needs.test.result }}" != "success" ]]; then
            echo "**üîß Quick Fixes:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "./bin/lint --fix    # Auto-fix linting issues" >> $GITHUB_STEP_SUMMARY
            echo "./bin/test          # Run tests locally" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "üéâ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check overall status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || "${{ needs.test.result }}" != "success" ]]; then
            echo "‚ùå CI failed - please fix issues and try again"
            exit 1
          else
            echo "‚úÖ All CI checks passed!"
          fi