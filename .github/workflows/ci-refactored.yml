name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RUBY_VERSION: '3.2.1'
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: fluke_base_test

jobs:
  # Database setup for tests
  setup:
    name: Setup Database
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: |
            ~/.bundle/cache
            vendor/bundle
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: Install Ruby dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Create and setup test database
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
        run: |
          bundle exec rails db:create:all
          bundle exec rails db:migrate
          bundle exec rails db:migrate:cache
          bundle exec rails db:migrate:queue
          bundle exec rails db:migrate:cable

  # Parallel linting jobs
  lint-ruby:
    name: 🔍 RuboCop (Ruby)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: |
            ~/.bundle/cache
            vendor/bundle
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: Install Ruby dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Run RuboCop
        run: bundle exec rubocop --format=github

  lint-security:
    name: 🔒 Brakeman (Security)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: |
            ~/.bundle/cache
            vendor/bundle
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: Install Ruby dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Run Brakeman
        run: bundle exec brakeman --quiet --format=github

  lint-templates:
    name: 📄 ERB Lint (Templates)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: |
            ~/.bundle/cache
            vendor/bundle
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: Install Ruby dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Run ERB Lint
        run: bundle exec erb_lint --lint-all --format=github

  lint-javascript:
    name: ⚡ ESLint (JavaScript)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: false

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:js

  # Unit tests with coverage
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: |
            ~/.bundle/cache
            vendor/bundle
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3
          npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
        run: |
          bundle exec rails db:create:all
          bundle exec rails db:migrate
          bundle exec rails db:migrate:cache || true
          bundle exec rails db:migrate:queue || true
          bundle exec rails db:migrate:cable || true

      - name: Run RSpec tests with coverage
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
          COVERAGE: true
        run: bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec.xml

      - name: Upload coverage reports
        if: always() && hashFiles('coverage/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      - name: Upload test results
        if: always() && hashFiles('tmp/rspec.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tmp/rspec.xml
          retention-days: 7

  # System/Integration tests
  system-tests:
    name: 🌐 System Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: false

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: |
            ~/.bundle/cache
            vendor/bundle
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3
          npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
        run: |
          bundle exec rails db:create:all
          bundle exec rails db:migrate
          bundle exec rails db:migrate:cache || true
          bundle exec rails db:migrate:queue || true
          bundle exec rails db:migrate:cable || true

      - name: Precompile assets
        env:
          RAILS_ENV: test
        run: bundle exec rails assets:precompile

      - name: Run system tests
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RAILS_ENV: test
        run: bundle exec rspec spec/system --format progress

      - name: Upload system test screenshots
        if: failure() && hashFiles('tmp/screenshots/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: system-test-screenshots
          path: tmp/screenshots/
          retention-days: 7

  # Summary and status check
  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [lint-ruby, lint-security, lint-templates, lint-javascript, unit-tests, system-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
        continue-on-error: true
        if: always()

      - name: Generate CI summary
        run: |
          echo "## 🏗️ CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 RuboCop (Ruby) | ${{ needs.lint-ruby.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Brakeman (Security) | ${{ needs.lint-security.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📄 ERB Lint (Templates) | ${{ needs.lint-templates.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ ESLint (JavaScript) | ${{ needs.lint-javascript.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 System Tests | ${{ needs.system-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📈 Coverage Reports**: [View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🛠️ Quick Fixes**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "./bin/lint --fix    # Auto-fix linting issues" >> $GITHUB_STEP_SUMMARY
          echo "bundle exec rspec   # Run tests locally" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [ "${{ needs.lint-ruby.result }}" != "success" ] || 
             [ "${{ needs.lint-security.result }}" != "success" ] || 
             [ "${{ needs.lint-templates.result }}" != "success" ] || 
             [ "${{ needs.lint-javascript.result }}" != "success" ] || 
             [ "${{ needs.unit-tests.result }}" != "success" ] || 
             [ "${{ needs.system-tests.result }}" != "success" ]; then
            echo "❌ One or more CI checks failed"
            exit 1
          else
            echo "✅ All CI checks passed!"
          fi